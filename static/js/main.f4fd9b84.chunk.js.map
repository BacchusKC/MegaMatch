{"version":3,"sources":["components/Icon.js","App.js","serviceWorker.js","index.js"],"names":["Icon","props","react_default","a","createElement","className","alt","name","src","onClick","handleClick","gameStatus","menuType","App","state","used","score","high","lost","status","menu","_this","indexOf","gameOver","tempUsed","push","setState","tempArray","Object","toConsumableArray","icons","i","length","j","Math","floor","random","temp","this","_this2","randomArray","imgShake","console","log","id","map","icon","components_Icon","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kqCAiBeA,MAdf,SAAcC,GAEV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KACZC,IAAKP,EAAMO,IACXD,KAAMN,EAAMM,KACZE,QAAS,kBAAMR,EAAMS,YAAYT,EAAMM,OACvCF,UAAU,aCNpBM,EAAa,CAAC,aAAc,2BAA4B,uBACxDC,EAAW,CAAC,4BAA6B,8BAA+B,iCAkF/DC,6MA/EbC,MAAQ,CACNC,KAAM,GACNC,MAAO,EACPC,KAAM,EACNC,MAAM,EACNC,OAAQR,EAAW,GACnBS,KAAMR,EAAS,MAGjBF,YAAc,SAACH,GACb,IAAuC,IAAnCc,EAAKP,MAAMC,KAAKO,QAAQf,GAC1Bc,EAAKE,eACA,CACL,IAAIC,EAAWH,EAAKP,MAAMC,KAC1BS,EAASC,KAAKlB,GACdc,EAAKK,SAAS,CAAEX,KAAMS,EAAUR,MAAOK,EAAKP,MAAME,MAAQ,EAAGE,MAAM,EAAOC,OAAQR,EAAW,GAAIS,KAAMR,EAAS,KAC5GS,EAAKP,MAAMG,MAAQI,EAAKP,MAAME,OAChCK,EAAKK,SAAS,CAAET,KAAMI,EAAKP,MAAME,MAAQ,8EAO7C,IADA,IAAIW,EAASC,OAAAC,EAAA,EAAAD,CAAOE,GACXC,EAAIJ,EAAUK,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC7C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOV,EAAUI,GACrBJ,EAAUI,GAAKJ,EAAUM,GACzBN,EAAUM,GAAKI,EAEjB,OAAOV,qCAIPW,KAAKZ,SAAS,CAAEX,KAAM,GAAIC,MAAO,EAAGE,MAAM,EAAMC,OAAQR,EAAW,GAAIS,KAAMR,EAAS,sCAG/E,IAAA2B,EAAAD,KACDE,EAAcF,KAAKF,SACrBK,EAAW,CAAC,OAOhB,OANAC,QAAQC,IAAIL,KAAKxB,MAAME,MAAOsB,KAAKxB,MAAMG,MAEvCwB,EADEH,KAAKxB,MAAMI,KACF,YAEA,MAGXhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,aAAasC,GAAG,OAAOpC,IAAI,6BACpCN,EAAAC,EAAAC,cAAA,OAAKE,IAAI,OAAOsC,GAAG,OAAOpC,IAAK8B,KAAKxB,MAAMM,OAC1ClB,EAAAC,EAAAC,cAAA,OAAKwC,GAAG,YACN1C,EAAAC,EAAAC,cAAA,MAAIwC,GAAG,SAAP,2BAA8CN,KAAKxB,MAAMG,MACzDf,EAAAC,EAAAC,cAAA,MAAIwC,GAAG,SAAP,kBAA+BN,KAAKxB,MAAME,QAE5Cd,EAAAC,EAAAC,cAAA,OAAKwC,GAAG,UACN1C,EAAAC,EAAAC,cAAA,kFACAF,EAAAC,EAAAC,cAAA,qJAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAWoC,GAEZD,EAAYK,IAAI,SAACC,GACf,OACE5C,EAAAC,EAAAC,cAAC2C,EAAD,CACEC,IAAKF,EAAKvC,KACVA,KAAMuC,EAAKvC,KACXC,IAAKsC,EAAKtC,IACVE,YAAa6B,EAAK7B,gBAR5B,aA7DUuC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f4fd9b84.chunk.js","sourcesContent":["import React from \"react\";\nimport './Icon.css'\n\nfunction Icon(props) {\n\n    return (\n        <div className=\"iconHolder\">\n            <img alt={props.name}\n                src={props.src}\n                name={props.name}\n                onClick={() => props.handleClick(props.name)}\n                className=\"bosses\"\n            />\n        </div>\n    )\n};\n\nexport default Icon;\n","import React, { Component } from 'react';\nimport './App.css';\nimport icons from './icons.json';\nimport Icon from './components/Icon';\n\nconst gameStatus = [\"You Lost!!\", \"Pick Your Enemy to Begin\", \"You Picked Correct!\"];\nconst menuType = [\"./assets/images/start.png\", \"./assets/images/correct.png\", \"./assets/images/incorrect.png\"];\n\nclass App extends Component {\n  state = {\n    used: [],\n    score: 0,\n    high: 0,\n    lost: false,\n    status: gameStatus[1],\n    menu: menuType[0]\n  };\n\n  handleClick = (name) => {\n    if (this.state.used.indexOf(name) !== -1) {\n      this.gameOver();\n    } else {\n      let tempUsed = this.state.used;\n      tempUsed.push(name);\n      this.setState({ used: tempUsed, score: this.state.score + 1, lost: false, status: gameStatus[2], menu: menuType[1] })\n      if (this.state.high <= this.state.score) {\n        this.setState({ high: this.state.score + 1 })\n      };\n    };\n  };\n\n  random() {\n    let tempArray = [...icons];\n    for (let i = tempArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = tempArray[i];\n      tempArray[i] = tempArray[j];\n      tempArray[j] = temp;\n    };\n    return tempArray;\n  };\n\n  gameOver() {\n    this.setState({ used: [], score: 0, lost: true, status: gameStatus[0], menu: menuType[2] });\n  };\n\n  render() {\n    const randomArray = this.random();\n    let imgShake = [\"row\"];\n    console.log(this.state.score, this.state.high);\n    if (this.state.lost) {\n      imgShake = \"shake row\";\n    } else {\n      imgShake = \"row\";\n    };\n    return (\n      <div>\n        <div className=\"sideBar\">\n          <img alt=\"Mega Match\" id=\"mega\" src=\"./assets/images/MEGA.png\" />\n          <img alt=\"menu\" id=\"menu\" src={this.state.menu} />\n          <div id=\"scorebox\">\n            <h1 id=\"score\">High Score: &nbsp;&nbsp;&nbsp;{this.state.high}</h1>\n            <h1 id=\"score\">Current Score: {this.state.score}</h1>\n          </div>\n          <div id=\"bottom\">\n            <h3>To Play: Click any Robot Master, but don't click the same one twice!</h3>\n            <h4> Attn: Because of the style of play in this game, playing on mobile isn't feasible, so I did not make it mobile responsive. Be Aware!</h4>\n          </div>\n        </div>\n        <div className={imgShake}>\n          {\n            randomArray.map((icon) => {\n              return (\n                <Icon\n                  key={icon.name}\n                  name={icon.name}\n                  src={icon.src}\n                  handleClick={this.handleClick}\n                />\n              );\n            })\n          };\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}